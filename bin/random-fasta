#!/usr/bin/env python

import sys
import logging
import random

from pbcore.io import FastaRecord, FastaWriter

from pbcommand.utils import setup_log
from pbcommand.cli import get_default_argparser, pacbio_args_runner

log = logging.getLogger(__name__)


class Constants(object):
    DNA = frozenset({'A', 'C', 'G', 'T'})


def _max_bases(n):
    min_v = min(10, n)
    max_b = random.randint(min_v, n)
    for _ in xrange(max_b):
        yield random.choice(list(Constants.DNA))


def _to_fasta_record(idx, max_bases):
    return FastaRecord(idx, "".join(list(_max_bases(max_bases))))


def run_main(output_file, max_records, max_bases):

    with FastaWriter(output_file) as f:
        for i, _ in enumerate(xrange(max_records)):
            r = _to_fasta_record("record_{i}".format(i=i), max_bases)
            f.writeRecord(r)

    return 0


def args_runner(args):
    return run_main(args.output_file, args.max_records, args.max_bases)


def get_parser():
    p = get_default_argparser("0.1.0", "Generate a random fasta file")

    p.add_argument('output_file', type=str, help="Output fasta file")
    p.add_argument('-m', '--max-records', type=int, default=200,
                   help="Max number of records to generate")
    p.add_argument('-b', '--max-bases', type=int, default=50,
                   help="Max number of bases")

    return p


def main(argv):
    return pacbio_args_runner(argv[1:], get_parser(),
                              args_runner,
                              log,
                              setup_log_func=setup_log)


if __name__ == '__main__':
    sys.exit(main(sys.argv))
